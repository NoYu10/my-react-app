(()=>{"use strict";({994:function(){var e=this&&this.__awaiter||function(e,t,i,o){return new(i||(i=Promise))(function(n,a){function r(e){try{c(o.next(e))}catch(e){a(e)}}function s(e){try{c(o.throw(e))}catch(e){a(e)}}function c(e){var t;e.done?n(e.value):(t=e.value,t instanceof i?t:new i(function(e){e(t)})).then(r,s)}c((o=o.apply(e,t||[])).next())})};const t=()=>e(void 0,void 0,void 0,function*(){const e=new Date;console.log(`[${e.toLocaleTimeString()}] --- Notification Check Start ---`);try{const t=e,i=yield chrome.storage.local.get(["flexTime_startTime","flexTime_targetHours","flexTime_targetMinutes","flexTime_breakStart","flexTime_breakEnd","flexTime_overtimeHours","flexTime_overtimeMinutes","flexTime_shortageHours","flexTime_shortageMinutes","notificationsAllowed","notificationShown","earlyLeaveNotificationShown","lastCheckedDate"]),o=new Date,n=o.getFullYear(),a=`${n}-${String(o.getMonth()+1).padStart(2,"0")}-${String(o.getDate()).padStart(2,"0")}`;let{flexTime_startTime:r,flexTime_targetHours:s=6,flexTime_targetMinutes:c=0,flexTime_breakStart:l,flexTime_breakEnd:m,flexTime_overtimeHours:u="",flexTime_overtimeMinutes:f="",flexTime_shortageHours:g="",flexTime_shortageMinutes:h="",notificationsAllowed:d,notificationShown:T,earlyLeaveNotificationShown:p,lastCheckedDate:N}=i;if(void 0===N&&(N=a),N!==a&&(console.log(`Date changed from ${N} to ${a}. Resetting notification flags.`),yield chrome.storage.local.set({notificationShown:"false",earlyLeaveNotificationShown:"false",lastCheckedDate:a}),T="false",p="false"),console.log(`  Settings: startTime=${r}, target=${s}h${c}m, notifications=${d}`),console.log(`  Flags: notificationShown=${T}, earlyLeave=${p}`),"true"!==d||!r)return void console.log("  -> Skipping: Notifications not allowed or startTime not set.");const w=/^\d{2}:\d{2}$/,v=()=>{const e=Number(s)+Number(c)/60>=6?.75:0;if(l&&w.test(l)&&m&&w.test(m)){const t=new Date,[i,o]=l.split(":");if(isNaN(parseInt(i))||isNaN(parseInt(o)))return{required:e,actual:0};t.setHours(parseInt(i),parseInt(o),0,0);const n=new Date,[a,r]=m.split(":");if(isNaN(parseInt(a))||isNaN(parseInt(r)))return{required:e,actual:0};n.setHours(parseInt(a),parseInt(r),0,0);const s=(n.getTime()-t.getTime())/36e5;return{required:e,actual:Math.max(0,s)}}if(l&&w.test(l)&&!m){const i=new Date,[o,n]=l.split(":");if(isNaN(parseInt(o))||isNaN(parseInt(n)))return{required:e,actual:0};if(i.setHours(parseInt(o),parseInt(n),0,0),t>=i){const o=(t.getTime()-i.getTime())/36e5;return{required:e,actual:Math.max(0,o)}}}return{required:e,actual:0}},S=()=>{if(!r||!w.test(r))return"--:--";const e=new Date,[t,i]=r.split(":");if(isNaN(parseInt(t))||isNaN(parseInt(i)))return console.error("Invalid start time format:",r),"--:--";e.setHours(parseInt(t),parseInt(i),0,0);const o=v(),n=60*Number(s)+Number(c),a=60*o.actual;return new Date(e.getTime()+60*n*1e3+60*a*1e3).toLocaleTimeString("ja-JP",{hour:"2-digit",minute:"2-digit",hour12:!1})},x=()=>{const e=60*Number(u)+Number(f)-(60*Number(g)+Number(h));return{balanceInMinutes:e,isOvertime:e>0,hours:Math.floor(Math.abs(e)/60),minutes:Math.abs(e)%60}},$=()=>{const e=x();if(!e.isOvertime||!r||!w.test(r))return null;const t=S();if("--:--"===t)return null;const[i,o]=t.split(":");if(isNaN(parseInt(i))||isNaN(parseInt(o)))return null;const n=new Date;return n.setHours(parseInt(i),parseInt(o),0,0),new Date(n.getTime()-60*e.balanceInMinutes*1e3).toLocaleTimeString("ja-JP",{hour:"2-digit",minute:"2-digit",hour12:!1})},k=S(),_=$(),I=x();if(console.log(`  Calculated: endTime=${k}, earlyLeaveTime=${_}`),"true"!==T&&"--:--"!==k){const[e,i]=k.split(":").map(Number),o=new Date(t);if(o.setHours(e,i,0,0),console.log(`  [End Time Check] Now: ${t.getTime()} (${t.toLocaleTimeString()}), Target: ${o.getTime()} (${o.toLocaleTimeString()})`),t>=o){let e="推奨退勤時間になりました！";I.isOvertime||0===I.balanceInMinutes||(e+=`\n今月は${I.hours>0?`${I.hours}時間`:""}${I.minutes}分不足しています。`),e+="\n（通知を完全に止めるには設定から通知をオフにしてください）",chrome.notifications.create("end-time-notification",{type:"basic",iconUrl:"icon128.png",title:"フレックスタイム管理",message:e,requireInteraction:!0}),yield chrome.storage.local.set({notificationShown:"true"})}}if("true"!==p&&_){const[e,i]=_.split(":").map(Number),o=new Date(t);o.setHours(e,i,0,0),console.log(`  [Early Leave Check] Now: ${t.getTime()} (${t.toLocaleTimeString()}), Target: ${o.getTime()} (${o.toLocaleTimeString()})`),t>=o&&(console.log("  -> Condition MET for early leave notification."),chrome.notifications.create("early-leave-notification",{type:"basic",iconUrl:"icon128.png",title:"フレックスタイム管理",message:`${I.hours>0?`${I.hours}時間`:""}${I.minutes}分早く帰れます！\n（通知を完全に止めるには設定から通知をオフにしてください）`,requireInteraction:!0}),yield chrome.storage.local.set({earlyLeaveNotificationShown:"true"}))}}catch(e){console.error("通知チェックエラー:",e)}finally{console.log(`[${(new Date).toLocaleTimeString()}] --- Notification Check End ---`)}}),i=()=>{chrome.alarms.clear("notificationCheck",e=>{const t=new Date,i=new Date(t.getTime());i.setMinutes(t.getMinutes()+1),i.setSeconds(0,0),chrome.alarms.create("notificationCheck",{when:i.getTime(),periodInMinutes:1}),console.log(`Notification check alarm ${e?"reset":"set"}. Next check at: ${i.toLocaleString()}`)}),t()};chrome.alarms.onAlarm.addListener(e=>{"notificationCheck"===e.name&&(console.log("Alarm triggered:",e.name),t())}),chrome.storage.onChanged.addListener((t,i)=>e(void 0,void 0,void 0,function*(){"local"===i&&["flexTime_startTime","flexTime_targetHours","flexTime_targetMinutes","flexTime_breakStart","flexTime_breakEnd","flexTime_overtimeHours","flexTime_overtimeMinutes","flexTime_shortageHours","flexTime_shortageMinutes"].some(e=>e in t)&&(console.log("Relevant settings have been updated. Resetting notification shown flags."),yield chrome.storage.local.set({notificationShown:"false",earlyLeaveNotificationShown:"false"}))})),chrome.runtime.onStartup.addListener(i),chrome.runtime.onInstalled.addListener(i),chrome.runtime.onMessage.addListener((e,t,o)=>{try{"startNotificationCheck"===e.action?(console.log("Message received to start/reset notification check."),i(),o({success:!0,message:"Notification check started/reset"})):"ping"===e.action?(console.log("Ping received from popup."),o({success:!0,message:"Service Worker is alive"})):(console.warn("Unknown action received:",e.action),o({success:!1,error:"Unknown action"}))}catch(e){console.error("onMessage listener error:",e),o({success:!1,error:e.message||"Unknown error"})}return!0}),chrome.notifications.onClicked.addListener(e=>{console.log("Notification clicked:",e),chrome.action.openPopup()}),chrome.notifications.onButtonClicked.addListener((e,t)=>{console.log("Notification button clicked:",e,t)})}})[994]()})();